MR5 Notes:

First Half of Midterm

Come up with statements to prove in the midterm in class.
Make us take the first steps in class. 

On the number of concepts since the beginning of the semester:
   1. Conditional equivalence <-> Observational equivalence of statments
   2. Conditional equivalence
   3. The effects of refactoring, super refactoring, and tree travelsal with an accumulator.
   
Main statement: Evenness or oddness of fibonacci numbers.

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, ...

Theorem: forall 3n-th fib number is even

==========================

If even is even, f(n + 3) is even <-> Exists q s.t m = 3q

If f(n) is odd <-> Exists q s.t m = 3q + 1 \/ 3q + 2


They are living in a logical exclusive OR. Either one is true, but not at the same time.
You need to define a logical exclusive OR.

if (a or b) and (c or d or e) then (a <-> c) <-> (b <-> d or e)

Do induction in one direction and do induction in the other direction.

It is important to notice the pattern of the exclusive disjunction and how it forms a commuting diagram.

==========================

Furthermore, f(0) is even. 


Second Half of Midterm:

A Simple Simplifier:

Write one yourself first. A language with Literal, Add, Minus. The 
simplifcation that the simplifier should do is that
for all m + 0 = m, 0 + n = n, and m - 0 = m. If we have multiplication is that m * 0 = 0
and m * 1 = m. 

The simplifier should recursively descend your expression from AE -> AE such that it performs the above
simplifcation. It should not have any occurance of subtration or addition of 0. 

First, it should be sound: Preserve the evaluation. If you evaluate an expression and evaluate a
simplified expression it should have the same result. The output of the evaluator should not 0.

We need a predicate over the arithmetic expression that the term is simplified. 

Another property is that simplifier is idempotent. 

More complicated stuff:

If the language has variables, then the simplifier can have constant folding. If the expression does not have variables,
it should evaluate that expression and return the Literal. If we simplify subtration, there may be 
errors. So it should return the simplified term or the error. 

