(* week-11_reasoning-about-streams.v *)
(* FPP 2023 - YSC3236 2023-2024, Sem1 *)
(* Olivier Danvy <danvy@yale-nus.edu.sg> *)
(* Version of 01 Nov 2023 *)
(* was: *)
(* Version of 30 Oct 2023 *)

(* ********** *)

Ltac fold_unfold_tactic name := intros; unfold name; fold name; reflexivity.

Require Import Arith Bool List.

(* ********** *)

Lemma binomial_expansion :
  forall x y : nat,
    (x + y) * (x + y) =
    x * x + 2 * x * y + y * y.
Proof.
  intros x y.
  ring.
Qed.

Definition binomial_expansion_Sn :
  forall n : nat,
    (S n) * (S n) =
    S (2 * n) + n * n.
Proof.
  intro n.
  ring.
Qed.

(* ********** *)

CoInductive stream (V : Type) : Type :=
| Cons : V -> stream V -> stream V.

CoInductive bisimilar : forall V : Type, (V -> V -> Prop) -> stream V -> stream V -> Prop :=
| Bisimilar :
    forall (V : Type)
           (eq_V : V -> V -> Prop)
           (v1 v2 : V)
           (v1s v2s : stream V),
    eq_V v1 v2 ->
    bisimilar V eq_V v1s v2s ->
    bisimilar V eq_V (Cons V v1 v1s) (Cons V v2 v2s).

(* ********** *)

Lemma Bisimilar_12_3 :
  forall (V : Type)
         (eq_V : V -> V -> Prop)
         (v1 v2 : V)
         (v1s v2s : stream V),
    eq_V v1 v2 ->
    bisimilar V eq_V v1s v2s ->
    bisimilar V eq_V (Cons V v1 v1s) (Cons V v2 v2s).
Proof.
  exact Bisimilar.
Qed.

Lemma Bisimilar_3_12 :
  forall (V : Type)
         (eq_V : V -> V -> Prop)
         (v1 v2 : V)
         (v1s' v2s' : stream V),
    bisimilar V eq_V (Cons V v1 v1s') (Cons V v2 v2s') ->
    eq_V v1 v2 /\ bisimilar V eq_V v1s' v2s'.
Proof.
  intros V eq_V v1 v2 v1s' v2s' bs_v1s'_v2s'.
  remember (Cons V v1 v1s') as v1s eqn:H_v1s.
  remember (Cons V v2 v2s') as v2s eqn:H_v2s.
  case bs_v1s'_v2s' as [V' eq_V' v1' v2' v1s'' v2s'' eq_v1'_v2' bs_v1s''_v2s''].
  injection H_v1s as eq_v1'_v1 eq_v1s''_v1s'.
  injection H_v2s as eq_v2'_v2 eq_v2s''_v2s'.
  rewrite <- eq_v1'_v1.
  rewrite <- eq_v2'_v2.
  rewrite <- eq_v1s''_v1s'.
  rewrite <- eq_v2s''_v2s'.
  exact (conj eq_v1'_v2' bs_v1s''_v2s'').
Qed.

Lemma Bisimilar_13_2 :
  forall (V : Type)
         (eq_V : V -> V -> Prop)
         (v1 v2 : V)
         (v1s v2s : stream V),
    eq_V v1 v2 ->
    bisimilar V eq_V (Cons V v1 v1s) (Cons V v2 v2s) ->
    bisimilar V eq_V v1s v2s.
Proof.
  intros V eq_V v1 v2 v1s v2s eq_v1_v2 bs_v1_v1s_v2_v2s.
  remember (Cons V v1 v1s) as v1s' eqn:H_v1s'.
  remember (Cons V v2 v2s) as v2s' eqn:H_v2s'.
  case bs_v1_v1s_v2_v2s as [V' eq_V' v1' v2' v1s'' v2s'' eq_v1'_v2' bs_v1s''_v2s''].
  injection H_v1s' as eq_v1'_v1 eq_v1s''_v1s.
  injection H_v2s' as eq_v2'_v2 eq_v2s''_v2s.
  rewrite <- eq_v1s''_v1s.
  rewrite <- eq_v2s''_v2s.
  exact bs_v1s''_v2s''.
Qed.

Lemma Bisimilar_23_1 :
  forall (V : Type)
         (eq_V : V -> V -> Prop)
         (v1 v2 : V)
         (v1s v2s : stream V),
    bisimilar V eq_V v1s v2s ->
    bisimilar V eq_V (Cons V v1 v1s) (Cons V v2 v2s) ->
    eq_V v1 v2.
Proof.
  intros V eq_V v1 v2 v1s v2s eq_v1_v2 bs_v1_v1s_v2_v2s.
  remember (Cons V v1 v1s) as v1s' eqn:H_v1s'.
  remember (Cons V v2 v2s) as v2s' eqn:H_v2s'.
  case bs_v1_v1s_v2_v2s as [V' eq_V' v1' v2' v1s'' v2s'' eq_v1'_v2' bs_v1s''_v2s''].
  injection H_v1s' as eq_v1'_v1 eq_v1s''_v1s.
  injection H_v2s' as eq_v2'_v2 eq_v2s''_v2s.
  rewrite <- eq_v1'_v1.
  rewrite <- eq_v2'_v2.
  exact eq_v1'_v2'.
Qed.

(* ********** *)

Proposition bisimilar_refl :
  forall (V : Type)
         (eq_V : V -> V -> Prop),
    (forall v : V,
        eq_V v v) ->
    forall vs : stream V,
      bisimilar V eq_V vs vs.
Proof.
  intros V eq_V eq_V_refl.
  cofix coIH.
  intros [v vs'].
  Check (Bisimilar V eq_V v v vs' vs' (eq_V_refl v) (coIH vs')).
  exact (Bisimilar V eq_V v v vs' vs' (eq_V_refl v) (coIH vs')).
Qed.

Proposition bisimilar_sym :
  forall (V : Type)
         (eq_V : V -> V -> Prop),
    (forall v1 v2 : V,
        eq_V v1 v2 ->
        eq_V v2 v1) ->
    forall v1s v2s : stream V,
      bisimilar V eq_V v1s v2s ->
      bisimilar V eq_V v2s v1s.
Proof.
  intros V eq_V eq_V_sym.
  cofix coIH.
  intros [v1 v1s'] [v2 v2s'] bs_v1s_v2s.
  Check (Bisimilar_3_12 V eq_V v1 v2 v1s' v2s' bs_v1s_v2s).
  destruct (Bisimilar_3_12 V eq_V v1 v2 v1s' v2s' bs_v1s_v2s) as [eq_v1_v2 bs_v1s'_v2s'].
  Check (Bisimilar V eq_V v2 v1 v2s' v1s').
  Check (Bisimilar V eq_V v2 v1 v2s' v1s' (eq_V_sym v1 v2 eq_v1_v2)).
  Check (Bisimilar V eq_V v2 v1 v2s' v1s' (eq_V_sym v1 v2 eq_v1_v2) (coIH v1s' v2s' bs_v1s'_v2s')).
  exact (Bisimilar V eq_V v2 v1 v2s' v1s' (eq_V_sym v1 v2 eq_v1_v2) (coIH v1s' v2s' bs_v1s'_v2s')).
Qed.

Proposition bisimilar_trans :
  forall (V : Type)
         (eq_V : V -> V -> Prop),
    (forall v1 v2 v3: V,
        eq_V v1 v2 ->
        eq_V v2 v3 ->
        eq_V v1 v3) ->
    forall v1s v2s v3s: stream V,
      bisimilar V eq_V v1s v2s ->
      bisimilar V eq_V v2s v3s ->
      bisimilar V eq_V v1s v3s.
Proof.
  intros V eq_V eq_V_trans.
  cofix coIH.
  intros [v1 v1s'] [v2 v2s'] [v3 v3s'] bs_v1s_v2s bs_v2s_v3s.
  Check (Bisimilar_3_12 V eq_V v2 v3 v2s' v3s' bs_v2s_v3s).
  destruct (Bisimilar_3_12 V eq_V v1 v2 v1s' v2s' bs_v1s_v2s) as [eq_v1_v2 bs_v1s'_v2s'].
  destruct (Bisimilar_3_12 V eq_V v2 v3 v2s' v3s' bs_v2s_v3s) as [eq_v2_v3 bs_v2s'_v3s'].
  Check (Bisimilar V eq_V v2 v3 v2s' v3s').
  Check (Bisimilar V eq_V v1 v3 v1s' v3s' (eq_V_trans v1 v2 v3 eq_v1_v2 eq_v2_v3)).
  Check (Bisimilar V eq_V v1 v3 v1s' v3s' (eq_V_trans v1 v2 v3 eq_v1_v2 eq_v2_v3)
           (coIH v1s' v2s' v3s' bs_v1s'_v2s' bs_v2s'_v3s')).
  exact (Bisimilar V eq_V v1 v3 v1s' v3s' (eq_V_trans v1 v2 v3 eq_v1_v2 eq_v2_v3)
           (coIH v1s' v2s' v3s' bs_v1s'_v2s' bs_v2s'_v3s')).
Qed.

(* ********** *)

(* 

  ********** Exercise 1 and 3 **********

*)

Check nat_ind.
Check nat_rect.
Print nat_rect.

(* ********** *)

(* ********** *)

Lemma twice_S :
  forall n : nat,
    S (S (2 * n)) = 2 * S n.
Admitted.

Lemma even_or_odd :
  forall n : nat,
    exists q : nat,
      n = 2 * q \/ n = S (2 * q).
Proof.
  intro n.
  induction n as [ | n' IHn'].
  - exists 0.
    rewrite -> Nat.mul_0_r.
    left.
    reflexivity.
  - destruct IHn' as [q [H_q | H_q]].
    + rewrite -> H_q.
      exists q.
      right.
      reflexivity.
    + rewrite -> H_q.
      rewrite -> twice_S.
      exists (S q).
      left.
      reflexivity.
  Show Proof.
Qed.

Definition test_half_once (candidate : nat -> nat) (n : nat) : bool :=
  let q := candidate n
  in (2 * q =? n) || (S (2 * q) =? n).
  
Definition test_half (candidate : nat -> nat) :=
  (test_half_once candidate 0) && (test_half_once candidate 1) && (test_half_once candidate 2) && (test_half_once candidate 3) && (test_half_once candidate 10) && (test_half_once candidate 13).

Inductive left_or_right : Type :=
  | Left  : nat -> left_or_right
  | Right : nat -> left_or_right.


(* Definition half_rect (n : nat) : nat := *)
(*   match nat_rect *)
(*           (fun _ : nat => left_or_right) *)
(*           ... *)
(*           ... *)
(*           n with *)
(*   | Left q => *)
(*     q *)
(*   | Right q => *)
(*     q *)
(*   end. *)

Definition half_rect (n : nat) : nat :=
  match nat_rect
          (fun _ : nat => left_or_right)  
          (Left 0)                        
          (fun _ ih =>                   
             match ih with
             | Left q =>
                 Right q          
             | Right q =>
                 Left (S q)      
             end)
          n
  with
  | Left q =>
      q
  | Right q =>
      q
  end.

Compute (test_half half_rect).

Definition half_fold_right (n : nat) : nat :=
  match nat_fold_right
          left_or_right
          (Left 0)
          (fun ih =>                   
             match ih with
             | Left q =>
                 Right q          
             | Right q =>
                 Left (S q)
             end)
          n
  with
  | Left q =>
      q
  | Right q =>
      q
  end.

Compute (test_half half_fold_right).

Definition half_fold_left (n : nat) : nat :=
  match nat_fold_left
          left_or_right
          (Left 0)
          (fun ih =>                   
             match ih with
             | Left q =>
                 Right q          
             | Right q =>
                 Left (S q)
             end)
          n
  with
  | Left q =>
      q
  | Right q =>
      q
  end.

Compute (test_half half_fold_left). 

Definition half_iterative (n : nat) : nat :=
  let fix visit n acc :=
    match n, acc with
    | 0, _ =>
        acc
    | S n', Left q =>
        visit n' (Right q)
    | S n', Right q =>
        visit n' (Left (S q))
    end
  in match visit n (Left 0) with
     | Left q =>
         q
     | Right q =>
         q
     end.

Compute (test_half half_iterative).

(* ********** *)

Definition test_square_root_and_remainder (candidate : nat -> nat * nat) :=
  (match candidate 16 with
   | (4, 0) =>
     true
   | _ =>
     false
   end)
    && 
  (match candidate 15 with
   | (3, 6) =>
     true
   | _ =>
     false
   end)
    && 
  (match candidate 14 with
   | (3, 5) =>
     true
   | _ =>
     false
   end)
    && 
  (match candidate 13 with
   | (3, 4) =>
     true
   | _ =>
     false
   end)
    && 
  (match candidate 12 with
   | (3, 3) =>
     true
   | _ =>
     false
   end)
    && 
  (match candidate 11 with
   | (3, 2) =>
     true
   | _ =>
     false
   end)
    && 
  (match candidate 10 with
   | (3, 1) =>
     true
   | _ =>
     false
   end)
    && 
  (match candidate 9 with
   | (3, 0) => true
   | _ => false
   end).

Lemma square_of_successor :
  forall x : nat,
    S x * S x = x * x + S (2 * x).
Proof.
  intro x.
  ring.
Qed.

Lemma square_root :
  forall n : nat,
    exists x r : nat,
      n = x * x + r /\ r < S (2 * x).
Proof.
  intro n.
  induction n as [ | n' [x [r [H_n H_r]]]].
  - exists 0, 0.
    split.
    + compute; reflexivity.
    + rewrite -> Nat.mul_0_r.
      exact Nat.lt_0_1.
  - case (le_lt_or_eq r (2 * x) (Arith_prebase.lt_n_Sm_le r (2 * x) H_r)) as [lt_2x_r | eq_2x_r].
    + exists x, (S r).
      split.
      * rewrite -> H_n.
        ring.
      * Search (_ < _ -> S _ < S _).
        exact (Arith_prebase.lt_n_S_stt r (2 * x) lt_2x_r).
    + exists (S x), 0.
      split.
      * rewrite -> H_n.
        rewrite -> eq_2x_r.
        ring.
      * exact (Nat.lt_0_succ (2 * S x)).
Qed.

Definition square_root_and_remainder_rect (n : nat) : nat * nat :=
  nat_rect
    (fun _ : nat => (nat * nat)%type)
    (0, 0)
    (fun _ ih =>
       let (x, r) := ih
       in if r <? (2 * x)
          then (x, S r)
          else (S x, 0))
    n.

Compute (test_square_root_and_remainder square_root_and_remainder_rect).

Definition square_root_and_remainder_right (n : nat) : nat * nat :=
  nat_parafold_right
    (nat * nat)
    (0, 0)
    (fun _ ih =>
       let (x, r) := ih
       in if r <? (2 * x)
          then (x, S r)
          else (S x, 0))
    n.

Compute (test_square_root_and_remainder square_root_and_remainder_right).

Definition square_root_and_remainder_right' (n : nat) : nat * nat :=
  nat_fold_right
    (nat * nat)
    (0, 0)
    (fun ih =>
       let (x, r) := ih
       in if r <? (2 * x)
          then (x, S r)
          else (S x, 0))
    n.

Compute (test_square_root_and_remainder square_root_and_remainder_right').

Definition square_root_and_remainder_left (n : nat) : nat * nat :=
  nat_fold_left
    (nat * nat)
    (0, 0)
    (fun ih =>
       let (x, r) := ih
       in if r <? (2 * x)
          then (x, S r)
          else (S x, 0))
    n.

Compute (test_square_root_and_remainder square_root_and_remainder_left).

Definition square_root_and_remainder_iterative (n : nat) : (nat * nat) :=
  let fix visit n x r :=
    match n with
    | O =>
        (x, r)
    | S n' =>
        if r <? (2 * x)
        then visit n' x (S r)
        else visit n' (S x) 0
    end
  in visit n 0 0.

Compute (test_square_root_and_remainder square_root_and_remainder_iterative).

(* ********** *)

(* end of week-11_for-all-there-exists.v *)